[{"name": "app.py", "content": "from shiny import App, reactive, render, ui\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nfrom shinywidgets import output_widget, render_widget\n\n\ndata_url = \"https://raw.githubusercontent.com/sadathasan4/social_opinion/main/dash_data.csv\"\n\ndash_data = pd.read_csv(data_url)\n\noptions_cat = dash_data[\"Category\"].unique().tolist()\n\ntreemapDf=pd.DataFrame(pd.pivot_table(dash_data, index=['Category','SubCategory'], values=['headline'], aggfunc=['count']))\ntreemapDf.columns = treemapDf.columns.droplevel()\ntreemapDf = treemapDf.reset_index()\n\n\n\n\n\n\n\napp_ui = ui.page_fluid(\n\n    ui.tags.style(\n        \"\"\"\n        .app-col {\n            border: 1px solid black;\n            border-radius: 5px;\n            background-color: #eee;\n            padding: 8px;\n            margin-top: 5px;\n            margin-bottom: 5px;\n        }\n        \"\"\"\n    ),\n\n    ui.h2({\"style\": \"text-align: center;\"}, \"Social Opinion Analytics by CDS\"),\n    \n\n    ui.row(\n        ui.column(\n                6,\n                ui.div(\n                    {\"class\": \"app-col\"},\n                    ui.h3({\"style\": \"text-align: center;\"},\"Topic Category\"),\n                    output_widget(\"hist_cat\"),\n                ),\n            ),\n\n        ui.column(\n                6,\n                ui.div(\n                    {\"class\": \"app-col\"},\n                    ui.h3({\"style\": \"text-align: center;\"},\"Topic Sub Category\"),\n                    output_widget(\"hist_subcat\"),\n                ),\n            )\n    ),\n\n    ui.row(\n        ui.column(\n                12,\n                ui.div(\n                    {\"class\": \"app-col\"},\n                    ui.h3({\"style\": \"text-align: center;\"},\"Treemap Visualization\"),\n                    output_widget(\"treemap_cat\"),\n                ),\n            )\n    ),\n\n    ui.row(\n\n        ui.column(\n                12,\n                ui.div(\n                    {\"class\": \"app-col\"},\n                    ui.h3({\"style\": \"text-align: center;\"},\"Category wise Trend\"),\n                    ui.layout_sidebar(\n                        ui.panel_sidebar(\n                            ui.input_selectize(\"cats\", \"Category\", options_cat, multiple=False),\n                        ),\n                        ui.panel_main(\n                            output_widget(\"trend_cat\"),\n                        )\n    \n                    )\n                )\n            )\n\n\n        \n    ),\n\n\n    \n    ui.row(\n\n        ui.column(\n                12,\n                ui.div(\n                    {\"class\": \"app-col\"},\n                    ui.h3({\"style\": \"text-align: center;\"},\"Keyword Search\"),\n                    ui.layout_sidebar(\n                        ui.panel_sidebar(\n                            ui.input_text(\"txt\", \"Keyword\", value=\"\u00e0\u00a6\u00a8\u00e0\u00a6\u00bf\u00e0\u00a6\u00b9\u00e0\u00a6\u00a4\"),\n                        ),\n                        ui.panel_main(\n                            output_widget(\"trend_string_avg\"),\n                        )\n    \n                    )\n                )\n            )\n\n\n        \n    )\n\n\n\n)\n\ndef server(input,output,session):\n\n    \n\n    @output\n    @render_widget\n    def hist_cat():\n         fig = px.histogram(\n             dash_data, x=\"Category\",  title=\"Category of News\",\n             template=\"plotly_white\").update_xaxes(categoryorder=\"total descending\")\n         return fig\n    \n\n    @output\n    @render_widget\n    def hist_subcat():\n        fig = px.histogram(\n            dash_data, x=\"SubCategory\",  title=\"Sub Category of News\",\n            template=\"plotly_white\").update_xaxes(categoryorder=\"total descending\")\n        return fig\n    \n\n    @output\n    @render_widget\n    def treemap_cat():\n        fig = px.treemap(treemapDf, path=['Category','SubCategory'],values='headline')\n        fig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\n        fig.update_traces(root_color=\"lightgrey\")\n        return fig\n    \n\n    @output\n    @render_widget\n    def trend_cat():\n        cat_ind = dash_data[\"Category\"].isin([input.cats()])\n        cat_df = dash_data[cat_ind]\n        cat_df['Date'] = pd.to_datetime(cat_df.time)\n        cat_df=cat_df.set_index('Date').resample('MS').size()\n        cat_df.reset_index()\n        cat_df=pd.DataFrame(cat_df.reset_index(name='News Count'))\n\n\n        fig = px.line(\n            cat_df, x=\"Date\", y=\"News Count\", \n            title='Number of News over the time',\n            markers = True, template=\"plotly_white\")\n        return fig\n    \n   \n\n    @output\n    @render_widget\n    def trend_string_avg():\n\n        str_df=dash_data[dash_data['headline'].str.contains(input.txt())]\n        str_df['Date'] = pd.to_datetime(str_df.time)\n        str_df1=str_df.set_index('Date').resample('MS').size()\n        str_df1.reset_index()\n        str_df2=pd.DataFrame(str_df1.reset_index(name='News Count'))\n        str_df3 = str_df2[str_df2['News Count'] > 0]\n\n        avg = str_df3['News Count'].median()\n\n\n        fig = px.bar(\n            str_df3, x='Date', y='News Count',template=\"plotly_white\")\n        fig.add_hline(y=avg,line_width=3, line_dash=\"dash\", \n                      line_color=\"green\",annotation_text=\"Average Mention Count\", \n                      annotation_position=\"bottom right\")\n        return fig\n    \n\n\n    \napp = App(app_ui,server)", "type": "text"}]